<?php

/**
 * @file
 * Drupal hooks and functions to manipulate.
 *
 * Account settings form and attachment functions
 * This is the main module file for account_settings_email_attachment.
 */

use Drupal\file\Entity\File; 
use Drupal\file\FileInterface;
 
 
// Define form_alter element so we can work with them through out the module.
define('ACCOUNT_SETTINGS_EMAIL_ATTACHMENT_FORM_ALTER_ELEMENT', serialize(
array('email_admin_created',
  'email_pending_approval',
  'email_no_approval_required',
  'email_activated',
  'email_password_reset',
  'email_blocked',
  'email_cancel_confirm',
  'email_canceled',
)));
/**
 * Implements hook_help().
 */
function account_settings_email_attachment_help($path, $arg) {

  switch ($path) {
    case 'admin/help#account_settings_email_attachment':
      $output = file_get_contents(drupal_get_path('module', 'account_settings_email_attachment') . '/README.txt');
      return module_exists('markdown') ? module_invoke('markdown', 'filter', 'process', 0, -1, $output) : '<pre>' . $output . '</pre>';
  }
}
/**
 * Implements hook_form_FORM_ID_alter().
 */
function account_settings_email_attachment_form_user_admin_settings_alter(&$form, &$form_state, $form_id) {

  $config = \Drupal::config('account_settings_email_attachment.settings');
  $account_settings_email_attachment_attach_id = $config->get('account_settings_email_attachment_attach_id');
  $pvt_file_system = $config->get('file_private_path');
  
  $upload_location = (isset($pvt_file_system) && $pvt_file_system!= "") ? 'private://mail_attachment/' : 'public://mail_attachment/';

  foreach (unserialize(ACCOUNT_SETTINGS_EMAIL_ATTACHMENT_FORM_ALTER_ELEMENT) as $form_element) {

    $form[$form_element][$form_element . 'attachment'] = array(
      '#type' => 'managed_file',
      '#title' => t('Attachment'),
      '#progress_message' => t('Please wait...'),
      '#progress_indicator' => 'bar',
      '#description' => t('Click "Browse..." to select a file to upload. Allowed extension : @extension', array('@extension' => $config->get('account_settings_email_attachment_allowed_extension', 'gif png jpg jpeg pdf doc xls docx xlsx'))),
      '#default_value' => ((isset($account_settings_email_attachment_attach_id[$form_element]) && $account_settings_email_attachment_attach_id[$form_element] > 0) ? $account_settings_email_attachment_attach_id[$form_element] : 0),
      '#upload_location' => $upload_location,
      '#upload_validators' => array(
        'file_validate_extensions' => array($config->get('account_settings_email_attachment_allowed_extension', 'gif png jpg jpeg pdf doc xls docx xlsx')),
      ),
    );
  }

  array_unshift($form['#submit'], 'account_settings_email_attachment_attachment_submit');

}

/**
 * Submit function to upload files.
 */
function account_settings_email_attachment_attachment_submit($form, &$form_state) {

  $attachment_value = array();
  $config = \Drupal::configFactory()->getEditable('account_settings_email_attachment.settings');

  foreach (unserialize(ACCOUNT_SETTINGS_EMAIL_ATTACHMENT_FORM_ALTER_ELEMENT) as $file_element) {

    $attachment_value[$file_element] = $form_state->getValue($file_element . 'attachment');

    if ($form_state->getValue($file_element . 'attachment') != '') {   
	
		$file = File::load($form_state->getValue($file_element . 'attachment'));
	    $file = file_save_data($file);		
			$file_usage = \Drupal::service('file.usage');
        $file_usage->add($file, 'account_attachment', 'account_attachment', $file->id());		
    }  
  }

  $config->set('account_settings_email_attachment_attach_id', $attachment_value)->save();

}


/**
 * Implements hook_mail_alter().
 */
function account_settings_email_attachment_mail_alter(&$message) {
  
  $config = \Drupal::config('account_settings_email_attachment.settings');
  $account_settings_email_attachment_attach_id = $config->get('account_settings_email_attachment_attach_id');
  foreach (unserialize(ACCOUNT_SETTINGS_EMAIL_ATTACHMENT_FORM_ALTER_ELEMENT) as $mail_element) {

    if ($mail_element == 'email_admin_created' || $mail_element == 'email_pending_approval' || $mail_element == 'email_no_approval_required') {

      $email_key = str_replace("email", "user_register", $mail_element);

    }
    elseif ($mail_element == 'email_activated' || $mail_element == 'email_blocked' || $mail_element == 'email_canceled') {
      $email_key = str_replace("email", "user_status", $mail_element);
    }
    elseif ($mail_element == 'email_password_reset' || $mail_element == 'email_cancel_confirm') {
      $email_key = str_replace("email", "user", $mail_element);
    }

    if ($message['id'] == $email_key && isset($account_settings_email_attachment_attach_id[$mail_element]) && $account_settings_email_attachment_attach_id[$mail_element] > 0) {
      $message['params']['attachments'][] = account_settings_email_attachment_mail_attachment($account_settings_email_attachment_attach_id[$mail_element]);
      break;
    }
  }
}

/**
 * Create attachment array to use them inside mail function.
 */
function account_settings_email_attachment_mail_attachment($fid) {

  $file = File::load( $fid);

  $attachment = array(
    'filecontent' => file_get_contents($file->uri),
    'filename' => $file->filename,
    'filemime' => $file->filemime,
  );

  return $attachment;
}
